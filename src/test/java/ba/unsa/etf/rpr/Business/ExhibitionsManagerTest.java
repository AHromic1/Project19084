package ba.unsa.etf.rpr.Business;

import ba.unsa.etf.rpr.business.ArtistsManager;
import ba.unsa.etf.rpr.business.ExhibitionManager;
import ba.unsa.etf.rpr.dao.ArtistsSQLImplementation;
import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.dao.ExhibitionsSQLImplementation;
import ba.unsa.etf.rpr.domain.Artists;
import ba.unsa.etf.rpr.domain.Exhibitions;
import ba.unsa.etf.rpr.exceptions.DBException;
import org.junit.jupiter.api.Test;
import java.sql.Date;
import java.time.LocalDate;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;

/**
 * junit tests for ExhibtionsManager class methods
 * @author Amina Hromic
 */


public class ExhibitionsManagerTest {
    private ExhibitionManager exhibitionsManager = new ExhibitionManager();
    private Exhibitions e;
    private ExhibitionsSQLImplementation exhibitionsSql;
    private List<Exhibitions> exhibitions;

    /**
     * testing of validateExhibition_name(String) method
     */
    @Test void validateName(){
        String name = "";
        assertThrows( DBException.class, ()->exhibitionsManager.validateExhibition_name(name), "Exhibition name cannot be longer than 50 or shorter than 1 character!");
    }
    /**
     * testing of validateLocation(String) method
     */

    @Test void validateLocation(){
        String loc = "";
        assertThrows( DBException.class, ()->exhibitionsManager.validateLocation(loc), "Location name cannot be longer than 50 or shorter than 1 character!");
    }
    /**
     * testing of validateStart_date(Date) method
     */
    @Test void validateStart_date(){
        LocalDate date = LocalDate.of(-2025, 1, 1);
        assertThrows( DBException.class, ()->exhibitionsManager.validateEnd_date(date), "Invalid date!");
    }
    /**
     * testing of validateEnd_date(Date) method
     */
    @Test void validateEnd_date(){
        LocalDate date = LocalDate.of(2020, 1, 1);
        assertThrows( DBException.class, ()->exhibitionsManager.validateEnd_date(date), "Invalid date!");
    }

    /**
     * testing of adding a new exhibition
     * @throws DBException
     */

    @Test
    void add() throws DBException {
       /* Exhibitions e = new Exhibitions(50, "Early work of da Vinci",Date.valueOf(LocalDate.of(2023, 1, 1)),
               Date.valueOf(LocalDate.of(2023, 3, 1)), "London");*/
        Exhibitions e = new Exhibitions();
        e.setId(0);
        e.setExhibition_name("Early work of da Vinci");
        LocalDate s_date = LocalDate.of(2023, 1, 1);
        e.setStart_date(Date.valueOf(s_date));
        LocalDate e_date = LocalDate.of(2023, 3, 1);
        e.setEnd_date(Date.valueOf(e_date));
        e.setLocation("London");


        assertThrows(DBException.class, ()->exhibitionsManager.add(e), "You cannot add a new exhibition containing ID. ID is autogenerated");
    }

}

