package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.DaoFactory;
//da je manje importa itd, grupisano + factory pattern
import ba.unsa.etf.rpr.domain.Artists;
import ba.unsa.etf.rpr.domain.Exhibitions;
import ba.unsa.etf.rpr.exceptions.DBException;

import java.sql.Date;
import java.time.LocalDate;
import java.time.Year;
import java.util.List;

/**
 * business logic class for Artists
 * @author Amina HromiÄ‡
 * @version 1.0
 */

public class ArtistsManager {

    /**
     * a method to make sure that artist's name is in a sensible range
     * @param name
     * @throws DBException if the name is invalid
     */

        public void validateName(String name) throws DBException {
            if (name == null || name.length() > 50 || name.length() < 1){
                throw new DBException("Artist's first name cannot be longer than 50 or shorter than 1 character!");
            }
        }

    /**
     * a method to ensure valid adding of a new artist
     * @param a an artist to be added
     * @return an instance of Artists
     * @throws DBException if the adding of anew artist is invalid
     */

    public Artists add(Artists a) throws DBException {
        if (a.getId() != 0){  //ne moze jer je autogeenrisan, ako u a posaljem i id
            throw new DBException("You cannot add a new artist containing ID. ID is autogenerated");
        }
        validateName(a.getName());

        try{
              return DaoFactory.artistsDao().add(a); //pristupa artistDao
        }
        catch (DBException exc){
            //ovo???
            if (exc.getMessage().contains("UQ_NAME")){
                throw new DBException("Artist with same name exists");
            }
            throw exc;
        }
    }


    /**
     * a method to ensure valid deletion of an artist
     * @param artistId id of an artist to be deleted
     * @throws DBException if parent-child integrity is compromised
     */
    public static void delete(int artistId) throws DBException{
        try{
             DaoFactory.artistsDao().delete(artistId);
        }
        catch (DBException e){ //ako error sadrzi foreign key
            if (e.getMessage().contains("FOREIGN KEY")){
                throw new DBException("First delete related items before deleting these rows.");
            }
            throw e;
        }

    }

    /**
     * a method to ensure valid updating of an artist
     * @param a artist to be updated to
     * @return instance of an updated artist
     * @throws DBException if something is out of order
     */

    public Artists update(Artists a) throws DBException{
        validateName(a.getName());
         return DaoFactory.artistsDao().update(a);
    }

    /**
     * a method to get a list of all artists
     * @return a list of all artists
     * @throws DBException if something is out of order
     */

    public List<Artists> getAll() throws DBException{
        return DaoFactory.artistsDao().getAll();
    }


}

