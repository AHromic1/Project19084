package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.domain.Artists;
import ba.unsa.etf.rpr.domain.Exhibitions;
import ba.unsa.etf.rpr.exceptions.DBException;

import java.time.LocalDate;
import java.util.List;

public class ArtistsManager {


        public void validateFirst_name(String FName) throws DBException {
            if (FName == null || FName.length() > 50 || FName.length() < 0){
                throw new DBException("Artist's first name cannot be longer than 50 or shorter than 0 characters!");
            }
        }
        public void validateLast_name(String LName) throws DBException {
            if (LName == null || LName.length() > 50 || LName.length() < 0){
                throw new DBException("Artist's last name cannot be longer than 50 or shorter than 0 characters!");
            }
        }

        public void validateBirth_date(LocalDate d) throws DBException {
            //moze?
            LocalDate s =  d;

            //timezone?

            //   if (start == null || s.getYear() >   || start.length() < 0){
            throw new DBException("Invalid date!");
        }



    public Artists add(Artists a) throws DBException {
        if (a.getId() != 0){
            throw new DBException("You cannot add a new artist containing ID. ID is autogenerated");
        }
        validateFirst_name(a.getFirst_name());
        validateLast_name(a.getLast_name());

        try{
              return DaoFactory.ExhibitionsDao().add(e);  PRVO POPRAVITI DAOFACTORY
        }
        catch (DBException exc){
            //ovo???
            if (exc.getMessage().contains("UQ_NAME")){
                throw new DBException("Category with same name exists");
            }
            throw exc;
        }
    }

    public void delete(int categoryId) throws DBException{
        try{
            // DaoFactory.ExhibitionsDao().delete(categoryId);
        }
        catch (DBException e){
            if (e.getMessage().contains("FOREIGN KEY")){  //da li mi treba ovdje uopce???
                throw new DBException("Deletion cannot be completed. First delete related items before deleting these rows.");
            }
            throw e;
        }

    }

    public Exhibitions update(Exhibitions e) throws DBException{
        validateExhibition_name(e.getExhibition_name());
        // return DaoFactory.ExhibitionsDao().update(e);
    }

    public List<Exhibitions> getAll() throws DBException{
        //return DaoFactory.ExhibitionsDao().getAll();
    }


}

