package ba.unsa.etf.rpr.business;


//koje sve validacije?

//objasnjenje za factorydao? zasto ovdje add i te metode?
//ne treba za id?
//treba li validate da su samo chars?

import ba.unsa.etf.rpr.domain.Exhibitions;
import ba.unsa.etf.rpr.exceptions.DBException;

import java.sql.Date;
import java.time.LocalDate;
import java.util.List;

public class ExhibitionManager {

    public void validateExhibition_name(String Ename) throws DBException {
        if (Ename == null || Ename.length() > 50 || Ename.length() < 0){
            throw new DBException("Exhibition name cannot be longer than 50 or shorter than 0 characters!");
        }
    }
    public void validateLocation(String loc) throws DBException {
        if (loc == null || loc.length() > 50 || loc.length() < 0){
            throw new DBException("Location name cannot be longer than 50 or shorter than 0 characters!");
        }
    }

    public void validateStart_date(LocalDate start) throws DBException {

        Date d = Date.valueOf(start.getYear() + "-"+start.getMonth()+"-"+start.getDayOfMonth());
        //moze?
        LocalDate s =  start;

        //timezone?

     //   if (start == null || s.getYear() >   || start.length() < 0){
            throw new DBException("Invalid date!");
        }



    public Exhibitions add(Exhibitions e) throws DBException {
        if (e.getId() != 0){
            throw new DBException("You cannot add a new exhibition containing ID. ID is autogenerated");
        }
        validateExhibition_name(e.getExhibition_name());

        try{
          //  return DaoFactory.ExhibitionsDao().add(e);  PRVO POPRAVITI DAOFACTORY
        }
        catch (DBException exc){
            System.out.println(exc.getMessage());
            //ovo???
            if (exc.getMessage().contains("UQ_NAME")){
                throw new DBException("Category with same name exists");
            }
            throw exc;
        }
    }

    public void delete(int categoryId) throws DBException{
        try{
           // DaoFactory.ExhibitionsDao().delete(categoryId);
        }
        catch (DBException e){
            if (e.getMessage().contains("FOREIGN KEY")){  //da li mi treba ovdje uopce???
                throw new DBException("Deletion cannot be completed. First delete related items before deleting these rows.");
            }
            throw e;
        }

    }

    public Exhibitions update(Exhibitions e) throws DBException{
        validateExhibition_name(e.getExhibition_name());
       // return DaoFactory.ExhibitionsDao().update(e);
    }

    public List<Exhibitions> getAll() throws DBException{
        //return DaoFactory.ExhibitionsDao().getAll();
    }
}


