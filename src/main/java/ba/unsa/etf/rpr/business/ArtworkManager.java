package ba.unsa.etf.rpr.business;

import ba.unsa.etf.rpr.dao.DaoFactory;
import ba.unsa.etf.rpr.domain.Artists;
import ba.unsa.etf.rpr.domain.Artwork;
import ba.unsa.etf.rpr.exceptions.DBException;
import javafx.collections.ObservableList;

import java.time.LocalDate;
import java.time.Year;
import java.util.List;

/**
 * business logic class for Artwork
 * @author Amina HromiÄ‡
 * @version 1.0
 */


public class ArtworkManager {

    /**
     * a method to make sure that artwork's name is in a sensible range
     * @param name
     * @throws DBException if the name is invalid
     */


    public void validateName(String name) throws DBException {
        if (name == null || name.length() > 50 || name.length() < 1){
            throw new DBException("Name cannot be longer than 50 or shorter than 1 character!");
        }
    }

    /**
     *  method to make sure that the name of an era is in a sensible range
     * @param era
     * @throws DBException if the name is invalid
     */
    public void validateEra(String era) throws DBException {
        if (era == null || era.length() > 50 || era.length() < 1){
            throw new DBException("Name of an era cannot be longer than 50 or shorter than 1 character!");
        }
    }

    /**
     *  method to make sure that the price of an artwork is not zero or negative
     * @param price
     * @throws DBException if the price is invalid
     */
    public void validatePrice(double price) throws DBException {
        if (price <= 0 ){
            throw new DBException("Price cannot be zero or negative!");
        }
    }

    /**
     *  a method to ensure valid adding of a new artwork
     * @param a artwork to be added
     * @return an instance of a new artwork
     * @throws DBException if the adding of a new artwork is invalid
     */
    public Artwork add(Artwork a) throws DBException {
        if (a.getId() != 0){
            throw new DBException("You cannot add a new artwork containing ID. ID is autogenerated");
        }
        validateName(a.getName());
        validateEra(a.getEra());
        validatePrice(a.getPrice());

        try{
            return DaoFactory.artworkDao().add(a);
        }
        catch (DBException exc){
            //ovo???
            if (exc.getMessage().contains("UQ_NAME")){
                throw new DBException("Artwork with the same name already exists");
            }
            throw exc;
        }
    }

    /**
     * a method to ensure valid deletion of an artwork
     * @param artworkId  id of an artwork to be deleted
     * @throws DBException if parent-child integrity is compromised
     */

    public void delete(int artworkId) throws DBException{
        try{
            DaoFactory.artworkDao().delete(artworkId);
        }
        catch (DBException e){
            if (e.getMessage().contains("FOREIGN KEY")){
                throw new DBException("First delete related items before deleting these rows.");
            }
            throw e;
        }

    }

    /**
     * a method to ensure valid updating of an artwork
     * @param a  artwork to be updated to
     * @return instance of an updated artwork
     * @throws DBException if something is out of order
     */

    public Artwork update(Artwork a) throws DBException{
        validateName(a.getName());
        validateEra(a.getEra());
        validatePrice(a.getPrice());
        return DaoFactory.artworkDao().update(a);
    }

    /**
     * a method to get a list of all artwork
     * @return a list of all artwork
     * @throws DBException if something is out of order
     */

    public List<Artwork> getAll() throws DBException{
        return DaoFactory.artworkDao().getAll();
    }

}
