package ba.unsa.etf.rpr.controllers;

import ba.unsa.etf.rpr.business.ArtistsManager;
import ba.unsa.etf.rpr.business.ExhibitionManager;
import ba.unsa.etf.rpr.domain.Artists;
import ba.unsa.etf.rpr.domain.Exhibitions;
import ba.unsa.etf.rpr.exceptions.DBException;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;

import java.sql.Date;

/**
 * @author Amina Hromic
 * controller for artists fxml file
 */
public class ArtistsController {


    private final ArtistsManager artistManager = new ArtistsManager();//validacije

    //private final ObservableList<Artists> artists = FXCollections.observableArrayList();

    @FXML
    public ListView<Artists> artistsList;// = new ListView<>();

    public TextField artistName ;//= new TextField();


    //public ObservableList<Artists> observableList = FXCollections.observableArrayList();

    /**
     * method used for initialization to an initial state using listeners
     */
    @FXML
    void initialize() {
        //try catch?
        // artistsList.setItems(artists);
        refreshArtists();
        artistsList.getSelectionModel().selectedItemProperty().addListener((obs, Old, New) -> {
            if (New != null) {
                artistName.setText(New.getName()); //old new - tipa umjetnik
            }
        });



    }
    //2 listenera?

    /**
     * add button event handler - a method which adds a new artist on action
     * @param event which sets the action in motion
     */
    public void addArtist(ActionEvent event){
        try {
            Artists a = new Artists();
            a.setId(0);  //ovo sam dodala jer je izbacivalo exception "Cannot add a new artist containing id. Id is autogenerated."
            a.setName(artistName.getText());
            a = artistManager.add(a);
            artistsList.getItems().add(a);
            artistName.setText("");
            //refreshArtists();
        }
        catch (DBException e){
            new Alert(Alert.AlertType.NONE, e.getMessage(), ButtonType.OK).show();
        }
    }

    /**
     *update button event handler - a method which updates an artist on action
     * @param event which sets the action in motion
     */

    public void updateArtist(ActionEvent event){
        try {
            Artists a = artistsList.getSelectionModel().getSelectedItem();
            a.setName(artistName.getText());
            a = artistManager.update(a);
            refreshArtists();
        }
        catch (DBException e){
            new Alert(Alert.AlertType.NONE, e.getMessage(), ButtonType.OK).show();
        }
    }

    /**
     * delete button event handler - a method which deletes an artist on action
     * @param event which sets the action in motion

     */

    public void deleteArtist(ActionEvent event){
        try {
            Artists a = artistsList.getSelectionModel().getSelectedItem();
            ArtistsManager.delete(a.getId());
            // refreshArtists();
            artistsList.getItems().remove(a); // performance optimization
            //refresh?
        }
        catch (DBException e){
            new Alert(Alert.AlertType.NONE, e.getMessage(), ButtonType.OK).show();
        }
    }

    /**
     * fetch quotes from the database - refresh
     */
    private void refreshArtists(){
        try {
            artistsList.setItems(FXCollections.observableList(artistManager.getAll()));
            //artists.setAll(artistManager.getAll());
            artistName.setText("");
            //  artistsList.refresh();
        }
        catch (DBException e) {
            new Alert(Alert.AlertType.NONE, e.getMessage(), ButtonType.OK).show();
        }
    }
}
